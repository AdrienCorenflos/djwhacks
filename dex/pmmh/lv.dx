'# Simulate an LV model

import djwutils -- load up my Dex utils from the logreg repo


-- Transition kernel for the LV process
def stepLV (th: Fin 3=>Float) (x: Fin 2=>Int) (t: Float) (k: Key) : (Fin 2=>Int) =
  yield_state x \xs.
    with_state 0.0 \ts.
     with_state k \ks.
      iter \_.
        cx = get xs
        ct = get ts
        k0 = get ks
        [k1, k2] = split_key k0
        h1 = th.(0@_)*(i_to_f cx.(0@_))
        h2 = th.(1@_)*(i_to_f (cx.(0@_)*cx.(1@_)))
        h3 = th.(2@_)*(i_to_f cx.(1@_))
        h0 = h1 + h2 + h3
        nt = if ((h0 < 1.0e-10) || (cx.(0@_) > 1000000))
          then
            1.0e99
          else
            ct + (exponential h0 k0)
        if (nt >= t)
          then
            Done ()
          else
            u = rand k1
            nx = if (u < (h1/h0))
              then
                cx + [1, 0]
              else
                if (u < ((h1+h2)/h0))
                  then
                    cx + [-1, 1]
                  else
                    cx + [0, -1]
            ks := k2
            xs := nx
            ts := nt
            Continue


-- test out the function...
k = new_key 42
th = [1.0, 0.005, 0.6]
stepLV th [50, 100] 2.0 k

kern = \x k. stepLV th x 2.0 k
kern [50, 100] k

ts = markov_chain [50, 100] kern 50 k
tsf = for i. for j. i_to_f ts.i.j
tsv = to_tsv tsf
tsv
unsafe_io do write_file "lv.tsv" tsv




-- eof
